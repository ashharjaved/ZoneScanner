import pytest
import pandas as pd
from stockfetcher.fetcher import StockFetcher
from pathlib import Path
from unittest.mock import MagicMock
import os

@pytest.fixture
def dummy_nse_data():
    """Mock NSE stock data with YahooSymbol and Symbol."""
    return pd.DataFrame({
        "SYMBOL": ["TCS.NS", "INFY.NS", "RELIANCE.NS"],
        "SERIES": ["EQ", "EQ", "EQ"],
        "DATE OF LISTING": ["2004-08-25"]*3,
        "ISIN NUMBER": ["INE467B01029"]*3,
        "FACE VALUE": [1]*3,
        "EXCHANGE": ["NSE"]*3,
        "YahooSymbol": ["TCS.NS", "INFY.NS", "RELIANCE.NS"],
        "Symbol": ["TCS", "INFY", "RELIANCE"]
    })

@pytest.fixture
def dummy_metadata():
    """Mock Yahoo Finance metadata."""
    return pd.DataFrame({
        "YahooSymbol": ["TCS.NS", "INFY.NS", "RELIANCE.NS"],
        "Symbol": ["TCS", "INFY", "RELIANCE"],
        "Company": ["TCS Ltd", "Infosys Ltd", "Reliance Ltd"],
        "Sector": ["Technology", "Technology", "Energy"],
        "Industry": ["Software", "IT Services", "Oil & Gas"]
    })

@pytest.fixture
def dummy_shariah_metadata():
    """Mock Yahoo Finance metadata with Shariah compliance data."""
    return [
        {
            "YahooSymbol": "TCS.NS",
            "Symbol": "TCS",
            "Company": "TCS Ltd",
            "Sector": "Technology",
            "Industry": "Software"
        },
        {
            "YahooSymbol": "INFY.NS",
            "Symbol": "INFY",
            "Company": "Infosys Ltd",
            "Sector": "Technology",
            "Industry": "IT Services"
        },
        None  # RELIANCE is non-compliant
    ]

def test_fetch_nse_symbols(mocker):
    """Test fetching NSE symbols."""
    mock_response = MagicMock()
    mock_response.text = "SYMBOL,SERIES,DATE OF LISTING,ISIN NUMBER,FACE VALUE\nTCS,EQ,2004-08-25,INE467B01029,1\nINFY,BE,2004-08-25,INE009A01021,5"
    mocker.patch("requests.Session.get", return_value=mock_response)
    fetcher = StockFetcher(exchange="nse")
    df = fetcher._fetch_nse_symbols(limit=2)
    assert not df.empty
    assert len(df) == 2
    assert list(df.columns) == ["SYMBOL", "SERIES", "DATE OF LISTING", "ISIN NUMBER", "FACE VALUE", "EXCHANGE"]
    assert df["SYMBOL"].tolist() == ["TCS.NS", "INFY.NS"]
    assert df["EXCHANGE"].eq("NSE").all()

def test_fetch_exchange_symbols_nse(mocker, dummy_nse_data):
    """Test fetch_exchange_symbols for NSE."""
    mocker.patch("stockfetcher.fetcher.StockFetcher._fetch_nse_symbols", return_value=dummy_nse_data)
    fetcher = StockFetcher(exchange="nse")
    df = fetcher.fetch_exchange_symbols(limit=3)
    assert not df.empty
    assert len(df) == 3
    assert df["EXCHANGE"].eq("NSE").all()

def test_add_metadata(mocker, dummy_nse_data, dummy_metadata):
    """Test adding metadata to NSE data."""
    mocker.patch("yfinance.Ticker", return_value=MagicMock(info={
        "sector": "Technology",
        "industry": "Software",
        "longName": "TCS Ltd"
    }))
    fetcher = StockFetcher()
    df = fetcher.add_metadata(dummy_nse_data)
    assert not df.empty
    assert "Sector" in df.columns
    assert "Industry" in df.columns
    assert len(df) == len(dummy_nse_data)

def test_basic_mode(mocker, dummy_nse_data):
    """Test collect_data in basic mode."""
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_exchange_symbols", return_value=dummy_nse_data)
    fetcher = StockFetcher()
    df = fetcher.collect_data(nse_limit=3, mode="basic")
    assert not df.empty
    assert len(df) == 3
    expected_columns = [
        "SYMBOL", "SERIES", "DATE OF LISTING", "ISIN NUMBER", "FACE VALUE",
        "YahooSymbol", "Symbol", "Company", "Sector", "Industry", "EXCHANGE"
    ]
    assert list(df.columns) == expected_columns
    assert df["Company"].eq("N/A").all()
    assert df["Sector"].eq("N/A").all()
    assert df["Industry"].eq("N/A").all()

def test_full_mode(mocker, dummy_nse_data, dummy_metadata):
    """Test collect_data in full mode."""
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_exchange_symbols", return_value=dummy_nse_data)
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_yahoo_metadata", side_effect=lambda x: next(
        d for d in dummy_metadata.to_dict("records") if d["YahooSymbol"] == x
    ))
    fetcher = StockFetcher()
    df = fetcher.collect_data(nse_limit=3, mode="full")
    assert not df.empty
    assert len(df) == 3
    assert "Sector" in df.columns
    df = df.sort_values("Symbol")
    assert df["Sector"].tolist() == ["Technology", "Energy", "Technology"]

def test_shariah_mode(mocker, dummy_nse_data, dummy_shariah_metadata):
    """Test collect_data in shariah mode."""
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_exchange_symbols", return_value=dummy_nse_data)
    mocker.patch("stockfetcher.fetcher.StockFetcher._fetch_shariah_metadata", side_effect=dummy_shariah_metadata)
    fetcher = StockFetcher()
    df = fetcher.collect_data(nse_limit=3, mode="shariah")
    assert not df.empty
    assert len(df) == 2  # RELIANCE is filtered out
    assert df["Sector"].eq("Technology").all()
    assert sorted(df["Symbol"].tolist()) == ["INFY", "TCS"]

def test_sector_filtering(mocker, dummy_nse_data, dummy_metadata):
    """Test sector filtering in full mode."""
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_exchange_symbols", return_value=dummy_nse_data)
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_yahoo_metadata", side_effect=lambda x: next(
        d for d in dummy_metadata.to_dict("records") if d["YahooSymbol"] == x
    ))
    fetcher = StockFetcher(sectors=["Technology"])
    df = fetcher.collect_data(nse_limit=3, mode="full")
    assert not df.empty
    assert len(df) == 2  # Only TCS and INFY are in Technology
    assert df["Sector"].eq("Technology").all()

def test_save_to_files(mocker, dummy_nse_data, tmp_path):
    """Test saving DataFrame to CSV."""
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_exchange_symbols", return_value=dummy_nse_data)
    fetcher = StockFetcher()
    df = fetcher.collect_data(nse_limit=3, mode="basic")
    mocker.patch("time.strftime", return_value="20250714")
    original_cwd = os.getcwd()
    os.chdir(tmp_path)
    try:
        fetcher.save_to_files(df, mode="basic")
        output_file = Path("nse_sectors_nse_basic_20250714.csv")
        assert output_file.exists()
        saved_df = pd.read_csv(output_file)
        assert len(saved_df) == len(df)
        assert list(saved_df.columns) == list(df.columns)
    finally:
        os.chdir(original_cwd)

def test_empty_data(mocker):
    """Test handling of empty data."""
    mocker.patch("stockfetcher.fetcher.StockFetcher.fetch_exchange_symbols", return_value=pd.DataFrame())
    fetcher = StockFetcher()
    df = fetcher.collect_data(nse_limit=3, mode="basic")
    assert df.empty

def test_invalid_exchange(mocker):
    """Test invalid exchange handling."""
    mocker.patch("stockfetcher.fetcher.StockFetcher._fetch_nse_symbols", side_effect=ValueError("Invalid exchange"))
    fetcher = StockFetcher(exchange="invalid")
    with pytest.raises(ValueError, match="Invalid exchange"):
        fetcher.fetch_exchange_symbols()