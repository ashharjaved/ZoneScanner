import subprocess
import pytest
from pathlib import Path
from unittest.mock import MagicMock
import sys
from stockfetcher.cli import main

def run_command(args, mocker=None):
    """Helper to run nsefetch command and handle encoding."""
    env = {**subprocess.os.environ, "PYTHONIOENCODING": "utf-8"}
    if mocker:
        # Mock NSE API
        mock_response = MagicMock()
        mock_response.text = "SYMBOL,SERIES,DATE OF LISTING,ISIN NUMBER,FACE VALUE\nTCS,EQ,2004-08-25,INE467B01029,1\nINFY,BE,2004-08-25,INE009A01021,5"
        mocker.patch("requests.Session.get", return_value=mock_response)
        # Mock Yahoo Finance API
        mocker.patch("yfinance.Ticker", return_value=MagicMock(info={
            "sector": "Technology",
            "industry": "Software",
            "longName": "TCS Ltd",
            "marketCap": 1000,
            "totalDebt": 100
        }))
        # Mock timestamp for consistent file names
        mocker.patch("time.strftime", return_value="20250714")
    return subprocess.run(
        ["nsefetch"] + args,
        capture_output=True,
        text=True,
        encoding="utf-8",
        env=env
    )

def test_cli_shariah_mode_with_limit(mocker):
    """Test CLI in shariah mode with a limit."""
    result = run_command(["--mode", "shariah", "--nse-limit", "5"], mocker)
    assert result.returncode == 0
    output = result.stdout.lower() + result.stderr.lower()
    assert "rows saved" in output or "no data found" in output
    assert Path("nse_sectors_nse_shariah_20250714.csv").exists()

def test_cli_full_mode_with_sectors(mocker):
    """Test CLI in full mode with sector filtering."""
    result = run_command(["--mode", "full", "--sector", "Technology", "--nse-limit", "10"], mocker)
    assert result.returncode == 0
    output = result.stdout.lower() + result.stderr.lower()
    assert "rows saved" in output or "no data found" in output
    assert "done" in output
    assert Path("nse_sectors_nse_full_20250714.csv").exists()

def test_cli_basic_mode_no_limit(mocker):
    """Test CLI in basic mode with no limit."""
    result = run_command(["--mode", "basic", "--no-limit"], mocker)
    assert result.returncode == 0
    output = result.stdout.lower() + result.stderr.lower()
    assert "rows saved" in output or "no data found" in output

def test_cli_invalid_mode():
    """Test CLI with an invalid mode."""
    result = run_command(["--mode", "invalid"])
    assert result.returncode != 0
    assert "invalid choice" in result.stderr.lower()

def test_cli_zero_limit_without_no_limit(mocker):
    """Test CLI with --nse-limit 0 without --no-limit."""
    result = run_command(["--nse-limit", "0"], mocker)
    assert result.returncode == 0
    assert "use --no-limit instead of --nse-limit 0" in result.stdout.lower()

def test_cli_basic_with_sectors(mocker):
    """Test CLI switching to full mode when sectors are provided in basic mode."""
    result = run_command(["--mode", "basic", "--sector", "Technology"], mocker)
    assert result.returncode == 0
    assert "switching to 'full' mode" in result.stdout.lower()
    output = result.stdout.lower() + result.stderr.lower()
    assert "rows saved" in output or "no data found" in output

def test_cli_no_args(mocker):
    """Test CLI with default arguments (shariah mode, limit 100)."""
    result = run_command([], mocker)
    assert result.returncode == 0
    output = result.stdout.lower() + result.stderr.lower()
    assert "rows saved" in output or "no data found" in output

def test_cli_keyboard_interrupt(mocker, capsys):
    """Test CLI handling of KeyboardInterrupt."""
    mocker.patch("stockfetcher.fetcher.StockFetcher.collect_data", side_effect=KeyboardInterrupt)
    mocker.patch("sys.argv", ["nsefetch", "--mode", "shariah", "--nse-limit", "5"])
    try:
        main()
    except SystemExit:
        pass
    captured = capsys.readouterr()
    assert "interrupted by user" in captured.out.lower()