import argparse
import time
from rich.console import Console
from .fetcher import StockFetcher
import sys
import os

# Set console encoding to UTF-8 on Windows
if sys.platform == "win32":
    os.environ["PYTHONIOENCODING"] = "utf-8"
    console = Console(force_terminal=False)
else:
    console = Console()

def parse_args():
    parser = argparse.ArgumentParser(
        description="""
üìä Fetch NSE stock metadata with optional sector filtering and Shariah compliance.

üîÅ Examples:
  nsefetch --mode shariah --nse-limit 50
  nsefetch --no-limit --sector Technology Healthcare
  nsefetch --mode full --sector IT --nse-limit 20
        """,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("-s", "--sector", nargs="+", dest="sectors", metavar="SECTOR",
                        help="Sectors to filter by (e.g. Technology, Healthcare)")
    parser.add_argument("-n", "--nse-limit", type=int, metavar="N",
                        help="Limit number of stocks fetched. Default is 100.")
    parser.add_argument("--no-limit", action="store_true",
                        help="Fetch all stocks (ignore --nse-limit).")
    parser.add_argument("--mode", choices=["basic", "full", "shariah"], default="shariah",
                        help="Choose mode: basic, full, or shariah. Default is shariah.")
    return parser.parse_args()

def main():
    args = parse_args()

    def safe_print(message):
        try:
            console.print(message)
        except UnicodeEncodeError:
            # Fallback to ASCII for Windows console
            console.print(message.encode("ascii", errors="replace").decode("ascii"))

    if args.nse_limit == 0 and not args.no_limit:
        safe_print("[bold yellow]‚ö†Ô∏è Use[/bold yellow] [green]--no-limit[/green] [bold yellow]instead of[/bold yellow] [red]--nse-limit 0[/red]")
        return

    if args.mode == "basic" and args.sectors:
        safe_print("[yellow]‚ÑπÔ∏è Sector filtering requires full metadata. Switching to 'full' mode.[/yellow]")
        args.mode = "full"

    limit = None if args.no_limit else (args.nse_limit or 100)

    fetcher = StockFetcher(sectors=args.sectors)

    try:
        start = time.perf_counter()
        df = fetcher.collect_data(nse_limit=limit, mode=args.mode)
        if df.empty:
            safe_print("[red]No data found.[/red]")
            return
        fetcher.save_to_files(df, mode=args.mode)
        safe_print(f"‚úÖ [green]Done[/green]. [cyan]{len(df)} rows saved.[/cyan] ‚è±Ô∏è {time.perf_counter() - start:.2f}s")
    except KeyboardInterrupt:
        safe_print("[yellow]‚õî Interrupted by user.[/yellow]")
    except Exception as e:
        safe_print(f"[bold red]‚ùå Error:[/bold red] {e}")